//shortest job first travel 

#include<stdio.h>

struct process {
    int id;
    int at;
    int bt;
    int wt;
    int tat;
};

void del(struct process p[],int n)
{
    for(int i=0;i<n;i++)
    {
        p[i]=p[i+1];
    }
    
}

void sort(struct process p[], int n)
{
    for (int i = 1; i < n; i++)
    {
        for (int j = 0; j < n - i; j++)
        {
            if (p[j].bt > p[j + 1].bt)
            {
                struct process t = p[j];
                p[j] = p[j + 1];
                p[j + 1] = t;
            }
        }
    }
}
int main()
{
    struct process p[10], eg[10], exe;
    int n;
    int pos=0;
    int i=0;
    int total;
    int count=0;
    printf("Enter the number of process:\n");
    scanf("%d",&n);
    
    //taking input
    for(int j=0;j<n;j++)
    {
        printf("Enter the arival time:%d\n", j+1);
        scanf("%d",&p[j].at);
        printf("Enter the burst time:%d\n",j+1);
        scanf("%d",&p[j].bt);
        
    }
    eg[pos++]=p[i++];
    //pos++,i++;
    total +=eg[0].bt;
    for(int i=0;i<=total;i++)
    {
        exe=eg[0];
        exe.bt=exe.bt - 1;
        count++;
        eg[0]=exe;
        if(exe.bt == 0)
        {
            eg[0] = exe;
            for(int k=0;k<n;k++)
            {
                if(p[k].id == exe.id)
                {
                    int temp = p[k].bt;
                    p[k]=exe;
                    p[k].bt = temp;
                    p[k].wt = count - p[k].bt - p[k].at;
                    p[k].tat= p[k].wt + p[k].bt;
                    
                }
            }
            
            printf("process %d ended at : %d\n",exe.id, count);
            del(eg,pos);
            pos--;
            
        }
        if(p[i].at <=count)
        {
            for(int m=i; m<n;m++)
            {
                if(p[m].at <= count)
                {
                    eg[pos++]=p[m];
                   // pos++,i++;
                    total+=p[m].bt;
                }
            }
            sort(eg, pos);
            
        }
        
    }
    
    printf("pid\tat\tbt\twt\ttnt\n");
    float avg_wt=0;
    float avg_tat=0;
    
    for(int i=0;i<n;i++)
    {
        
        printf("%d\t%d\t%d\t%d\t%d\n",p[i].id,p[i].at,p[i].bt,p[i].wt,p[i].tat);
        avg_wt += p[i].wt;
        avg_tat +=p[i].tat;
        
    }
    avg_wt=avg_wt /n;
    avg_tat=avg_tat /n;
    printf("average waiting time:%d\n",avg_wt);
    printf("average turn around  time:%d\n",avg_tat);
    
    
    
    
    
    return 0;
}
